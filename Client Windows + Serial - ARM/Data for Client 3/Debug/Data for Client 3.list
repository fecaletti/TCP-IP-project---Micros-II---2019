
Data for Client 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e7c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002040  08002040  00012040  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002060  08002060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002068  08002068  00012068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800206c  0800206c  0001206c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000194  2000000c  0800207c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001a0  0800207c  000201a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fb8f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002936  00000000  00000000  0002fbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007607  00000000  00000000  00032501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ae0  00000000  00000000  00039b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cf8  00000000  00000000  0003a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005e1b  00000000  00000000  0003b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000040ac  00000000  00000000  000410fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000451a7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001f50  00000000  00000000  00045224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002028 	.word	0x08002028

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002028 	.word	0x08002028

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f9de 	bl	80008ec <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f992 	bl	8000868 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f963 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f001 fbca 	bl	8001d1c <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000034 	.word	0x20000034
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000034 	.word	0x20000034

080005b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b6:	4604      	mov	r4, r0
 80005b8:	2800      	cmp	r0, #0
 80005ba:	f000 809b 	beq.w	80006f4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005be:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005c0:	b925      	cbnz	r5, 80005cc <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005c2:	f001 fa5b 	bl	8001a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005c6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005c8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ce:	06db      	lsls	r3, r3, #27
 80005d0:	f100 808e 	bmi.w	80006f0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005da:	f023 0302 	bic.w	r3, r3, #2
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005e4:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <HAL_ADC_Init+0x144>)
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005ec:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	6861      	ldr	r1, [r4, #4]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005f6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005f8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800060a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800060c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800060e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000612:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	430a      	orrs	r2, r1
 8000618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800061a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800061c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800061e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	430a      	orrs	r2, r1
 8000628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800062a:	4934      	ldr	r1, [pc, #208]	; (80006fc <HAL_ADC_Init+0x148>)
 800062c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800062e:	428a      	cmp	r2, r1
 8000630:	d052      	beq.n	80006d8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000632:	6899      	ldr	r1, [r3, #8]
 8000634:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000638:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800063a:	6899      	ldr	r1, [r3, #8]
 800063c:	430a      	orrs	r2, r1
 800063e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000640:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000642:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800064e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000650:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000652:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000654:	f022 0202 	bic.w	r2, r2, #2
 8000658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000660:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000662:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000666:	2a00      	cmp	r2, #0
 8000668:	d03e      	beq.n	80006e8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800066a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800066c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800066e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800067a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	3901      	subs	r1, #1
 8000680:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000684:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000688:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800068a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000692:	3901      	subs	r1, #1
 8000694:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800069a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800069c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006ac:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006ba:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006bc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006c0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006c2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006d0:	2300      	movs	r3, #0
 80006d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006d6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006e6:	e7b2      	b.n	800064e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ee:	e7c9      	b.n	8000684 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7ed      	b.n	80006d0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006f4:	2001      	movs	r0, #1
}
 80006f6:	bd38      	pop	{r3, r4, r5, pc}
 80006f8:	40012300 	.word	0x40012300
 80006fc:	0f000001 	.word	0x0f000001

08000700 <HAL_ADC_ConfigChannel>:
{
 8000700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000702:	2300      	movs	r3, #0
 8000704:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000706:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800070a:	2b01      	cmp	r3, #1
 800070c:	d06e      	beq.n	80007ec <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800070e:	680d      	ldr	r5, [r1, #0]
 8000710:	6804      	ldr	r4, [r0, #0]
 8000712:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000714:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000716:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000718:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800071c:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800071e:	d92a      	bls.n	8000776 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000720:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000724:	68e7      	ldr	r7, [r4, #12]
 8000726:	3b1e      	subs	r3, #30
 8000728:	f04f 0e07 	mov.w	lr, #7
 800072c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000730:	ea27 070e 	bic.w	r7, r7, lr
 8000734:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000736:	68e7      	ldr	r7, [r4, #12]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	433b      	orrs	r3, r7
 800073e:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000740:	684a      	ldr	r2, [r1, #4]
 8000742:	2a06      	cmp	r2, #6
 8000744:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000748:	d825      	bhi.n	8000796 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800074a:	4413      	add	r3, r2
 800074c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800074e:	1f59      	subs	r1, r3, #5
 8000750:	231f      	movs	r3, #31
 8000752:	408b      	lsls	r3, r1
 8000754:	ea27 0303 	bic.w	r3, r7, r3
 8000758:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800075a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800075c:	fa06 f101 	lsl.w	r1, r6, r1
 8000760:	4311      	orrs	r1, r2
 8000762:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <HAL_ADC_ConfigChannel+0x130>)
 8000766:	429c      	cmp	r4, r3
 8000768:	d034      	beq.n	80007d4 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800076a:	2300      	movs	r3, #0
 800076c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000770:	4618      	mov	r0, r3
}
 8000772:	b003      	add	sp, #12
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000776:	6927      	ldr	r7, [r4, #16]
 8000778:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800077c:	f04f 0e07 	mov.w	lr, #7
 8000780:	fa0e fe03 	lsl.w	lr, lr, r3
 8000784:	ea27 070e 	bic.w	r7, r7, lr
 8000788:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800078a:	6927      	ldr	r7, [r4, #16]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	433b      	orrs	r3, r7
 8000792:	6123      	str	r3, [r4, #16]
 8000794:	e7d4      	b.n	8000740 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000796:	2a0c      	cmp	r2, #12
 8000798:	d80e      	bhi.n	80007b8 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800079a:	4413      	add	r3, r2
 800079c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800079e:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80007a2:	231f      	movs	r3, #31
 80007a4:	4093      	lsls	r3, r2
 80007a6:	ea21 0303 	bic.w	r3, r1, r3
 80007aa:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ae:	fa06 f202 	lsl.w	r2, r6, r2
 80007b2:	431a      	orrs	r2, r3
 80007b4:	6322      	str	r2, [r4, #48]	; 0x30
 80007b6:	e7d5      	b.n	8000764 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007b8:	4413      	add	r3, r2
 80007ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007bc:	3b41      	subs	r3, #65	; 0x41
 80007be:	221f      	movs	r2, #31
 80007c0:	409a      	lsls	r2, r3
 80007c2:	ea21 0202 	bic.w	r2, r1, r2
 80007c6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007ca:	fa06 f103 	lsl.w	r1, r6, r3
 80007ce:	4311      	orrs	r1, r2
 80007d0:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007d2:	e7c7      	b.n	8000764 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007d4:	2d12      	cmp	r5, #18
 80007d6:	d10b      	bne.n	80007f0 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_ADC_ConfigChannel+0x134>)
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80007e0:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	e7be      	b.n	800076a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80007ec:	2002      	movs	r0, #2
 80007ee:	e7c0      	b.n	8000772 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_ADC_ConfigChannel+0x138>)
 80007f2:	429d      	cmp	r5, r3
 80007f4:	d001      	beq.n	80007fa <HAL_ADC_ConfigChannel+0xfa>
 80007f6:	2d11      	cmp	r5, #17
 80007f8:	d1b7      	bne.n	800076a <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_ADC_ConfigChannel+0x134>)
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000802:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800080a:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_ADC_ConfigChannel+0x138>)
 800080e:	429d      	cmp	r5, r3
 8000810:	d1ab      	bne.n	800076a <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_ADC_ConfigChannel+0x13c>)
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <HAL_ADC_ConfigChannel+0x140>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	fbb3 f2f2 	udiv	r2, r3, r2
 800081c:	230a      	movs	r3, #10
 800081e:	4353      	muls	r3, r2
        counter--;
 8000820:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000822:	9b01      	ldr	r3, [sp, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0a0      	beq.n	800076a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000828:	9b01      	ldr	r3, [sp, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	e7f8      	b.n	8000820 <HAL_ADC_ConfigChannel+0x120>
 800082e:	bf00      	nop
 8000830:	40012000 	.word	0x40012000
 8000834:	40012300 	.word	0x40012300
 8000838:	10000012 	.word	0x10000012
 800083c:	20000008 	.word	0x20000008
 8000840:	000f4240 	.word	0x000f4240

08000844 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000846:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000848:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800084c:	041b      	lsls	r3, r3, #16
 800084e:	0c1b      	lsrs	r3, r3, #16
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	0200      	lsls	r0, r0, #8
 8000856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800085e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000860:	60d3      	str	r3, [r2, #12]
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086a:	b530      	push	{r4, r5, lr}
 800086c:	68dc      	ldr	r4, [r3, #12]
 800086e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000872:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	2b04      	cmp	r3, #4
 800087a:	bf28      	it	cs
 800087c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 0501 	mov.w	r5, #1
 8000884:	fa05 f303 	lsl.w	r3, r5, r3
 8000888:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088c:	bf8c      	ite	hi
 800088e:	3c03      	subhi	r4, #3
 8000890:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000892:	4019      	ands	r1, r3
 8000894:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000896:	fa05 f404 	lsl.w	r4, r5, r4
 800089a:	3c01      	subs	r4, #1
 800089c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800089e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	ea42 0201 	orr.w	r2, r2, r1
 80008a4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	bfad      	iteet	ge
 80008aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	f000 000f 	andlt.w	r0, r0, #15
 80008b2:	4b06      	ldrlt	r3, [pc, #24]	; (80008cc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	bfb5      	itete	lt
 80008ba:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80008c4:	bd30      	pop	{r4, r5, pc}
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00
 80008cc:	e000ed14 	.word	0xe000ed14

080008d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008d0:	2800      	cmp	r0, #0
 80008d2:	db08      	blt.n	80008e6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d4:	0942      	lsrs	r2, r0, #5
 80008d6:	2301      	movs	r3, #1
 80008d8:	f000 001f 	and.w	r0, r0, #31
 80008dc:	fa03 f000 	lsl.w	r0, r3, r0
 80008e0:	4b01      	ldr	r3, [pc, #4]	; (80008e8 <HAL_NVIC_EnableIRQ+0x18>)
 80008e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100

080008ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	3801      	subs	r0, #1
 80008ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008f2:	d20a      	bcs.n	800090a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	21f0      	movs	r1, #240	; 0xf0
 80008fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000904:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800090a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e010 	.word	0xe000e010
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000918:	6803      	ldr	r3, [r0, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000920:	f023 0303 	bic.w	r3, r3, #3
 8000924:	2118      	movs	r1, #24
 8000926:	3a10      	subs	r2, #16
 8000928:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800092e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000930:	bf88      	it	hi
 8000932:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000934:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000936:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000938:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800093a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	08002040 	.word	0x08002040

08000944 <HAL_DMA_Init>:
{
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff fe2e 	bl	80005a8 <HAL_GetTick>
 800094c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800094e:	2c00      	cmp	r4, #0
 8000950:	d071      	beq.n	8000a36 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000952:	2300      	movs	r3, #0
 8000954:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000958:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800095a:	2302      	movs	r3, #2
 800095c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f023 0301 	bic.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000968:	6821      	ldr	r1, [r4, #0]
 800096a:	680b      	ldr	r3, [r1, #0]
 800096c:	07d8      	lsls	r0, r3, #31
 800096e:	d43c      	bmi.n	80009ea <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000970:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000972:	4d32      	ldr	r5, [pc, #200]	; (8000a3c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000974:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000976:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000978:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800097a:	68a3      	ldr	r3, [r4, #8]
 800097c:	4313      	orrs	r3, r2
 800097e:	68e2      	ldr	r2, [r4, #12]
 8000980:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000982:	6922      	ldr	r2, [r4, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	6962      	ldr	r2, [r4, #20]
 8000988:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800098a:	69e2      	ldr	r2, [r4, #28]
 800098c:	4303      	orrs	r3, r0
 800098e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000990:	6a22      	ldr	r2, [r4, #32]
 8000992:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000994:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000996:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000998:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800099c:	bf01      	itttt	eq
 800099e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80009a0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80009a2:	4335      	orreq	r5, r6
 80009a4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80009a6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80009a8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009aa:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009ac:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80009b0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009b4:	d10b      	bne.n	80009ce <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80009b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009b8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80009ba:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009bc:	b13d      	cbz	r5, 80009ce <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009be:	b9f8      	cbnz	r0, 8000a00 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80009c0:	2a01      	cmp	r2, #1
 80009c2:	d02d      	beq.n	8000a20 <HAL_DMA_Init+0xdc>
 80009c4:	d301      	bcc.n	80009ca <HAL_DMA_Init+0x86>
 80009c6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009c8:	d101      	bne.n	80009ce <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009ca:	01ea      	lsls	r2, r5, #7
 80009cc:	d42b      	bmi.n	8000a26 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80009ce:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009d0:	4620      	mov	r0, r4
 80009d2:	f7ff ffa1 	bl	8000918 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009d8:	233f      	movs	r3, #63	; 0x3f
 80009da:	4093      	lsls	r3, r2
 80009dc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009de:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80009e0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009e2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80009e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009ea:	f7ff fddd 	bl	80005a8 <HAL_GetTick>
 80009ee:	1b40      	subs	r0, r0, r5
 80009f0:	2805      	cmp	r0, #5
 80009f2:	d9b9      	bls.n	8000968 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009f4:	2320      	movs	r3, #32
 80009f6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80009f8:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80009fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000a00:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000a04:	d113      	bne.n	8000a2e <HAL_DMA_Init+0xea>
    switch (tmp)
 8000a06:	2a03      	cmp	r2, #3
 8000a08:	d8e1      	bhi.n	80009ce <HAL_DMA_Init+0x8a>
 8000a0a:	a001      	add	r0, pc, #4	; (adr r0, 8000a10 <HAL_DMA_Init+0xcc>)
 8000a0c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000a10:	08000a27 	.word	0x08000a27
 8000a14:	080009cb 	.word	0x080009cb
 8000a18:	08000a27 	.word	0x08000a27
 8000a1c:	08000a21 	.word	0x08000a21
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000a20:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000a24:	d1d3      	bne.n	80009ce <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	e7e5      	b.n	80009fa <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000a2e:	2a02      	cmp	r2, #2
 8000a30:	d9f9      	bls.n	8000a26 <HAL_DMA_Init+0xe2>
 8000a32:	2a03      	cmp	r2, #3
 8000a34:	e7c8      	b.n	80009c8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000a36:	2001      	movs	r0, #1
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	bf00      	nop
 8000a3c:	f010803f 	.word	0xf010803f

08000a40 <HAL_DMA_IRQHandler>:
{
 8000a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000a42:	2300      	movs	r3, #0
 8000a44:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a46:	4b5a      	ldr	r3, [pc, #360]	; (8000bb0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a48:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a4a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a4c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000a4e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a50:	2208      	movs	r2, #8
 8000a52:	409a      	lsls	r2, r3
 8000a54:	4216      	tst	r6, r2
{
 8000a56:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a58:	d00c      	beq.n	8000a74 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a5a:	6801      	ldr	r1, [r0, #0]
 8000a5c:	6808      	ldr	r0, [r1, #0]
 8000a5e:	0740      	lsls	r0, r0, #29
 8000a60:	d508      	bpl.n	8000a74 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a62:	6808      	ldr	r0, [r1, #0]
 8000a64:	f020 0004 	bic.w	r0, r0, #4
 8000a68:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a6a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a6e:	f042 0201 	orr.w	r2, r2, #1
 8000a72:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a74:	2201      	movs	r2, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	4216      	tst	r6, r2
 8000a7a:	d008      	beq.n	8000a8e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a7c:	6821      	ldr	r1, [r4, #0]
 8000a7e:	6949      	ldr	r1, [r1, #20]
 8000a80:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a82:	bf41      	itttt	mi
 8000a84:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a86:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000a88:	f042 0202 	orrmi.w	r2, r2, #2
 8000a8c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	409a      	lsls	r2, r3
 8000a92:	4216      	tst	r6, r2
 8000a94:	d008      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a96:	6821      	ldr	r1, [r4, #0]
 8000a98:	6809      	ldr	r1, [r1, #0]
 8000a9a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a9c:	bf41      	itttt	mi
 8000a9e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000aa0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000aa2:	f042 0204 	orrmi.w	r2, r2, #4
 8000aa6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	4216      	tst	r6, r2
 8000aae:	d010      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	6819      	ldr	r1, [r3, #0]
 8000ab4:	0709      	lsls	r1, r1, #28
 8000ab6:	d50c      	bpl.n	8000ad2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ab8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	0350      	lsls	r0, r2, #13
 8000abe:	d535      	bpl.n	8000b2c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	0319      	lsls	r1, r3, #12
 8000ac4:	d401      	bmi.n	8000aca <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ac8:	e000      	b.n	8000acc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000aca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000acc:	b10b      	cbz	r3, 8000ad2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000ace:	4620      	mov	r0, r4
 8000ad0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	408a      	lsls	r2, r1
 8000ad8:	4216      	tst	r6, r2
 8000ada:	d038      	beq.n	8000b4e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	06c6      	lsls	r6, r0, #27
 8000ae2:	d534      	bpl.n	8000b4e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ae4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ae6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000aea:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000aec:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000aee:	d125      	bne.n	8000b3c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000af0:	f022 0216 	bic.w	r2, r2, #22
 8000af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000af6:	695a      	ldr	r2, [r3, #20]
 8000af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000afc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000afe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b00:	b90a      	cbnz	r2, 8000b06 <HAL_DMA_IRQHandler+0xc6>
 8000b02:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000b04:	b11a      	cbz	r2, 8000b0e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	f022 0208 	bic.w	r2, r2, #8
 8000b0c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b0e:	233f      	movs	r3, #63	; 0x3f
 8000b10:	408b      	lsls	r3, r1
 8000b12:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000b14:	2300      	movs	r3, #0
 8000b16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000b20:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000b22:	b10b      	cbz	r3, 8000b28 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000b24:	4620      	mov	r0, r4
 8000b26:	4798      	blx	r3
}
 8000b28:	b003      	add	sp, #12
 8000b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b30:	bf5e      	ittt	pl
 8000b32:	681a      	ldrpl	r2, [r3, #0]
 8000b34:	f022 0208 	bicpl.w	r2, r2, #8
 8000b38:	601a      	strpl	r2, [r3, #0]
 8000b3a:	e7c4      	b.n	8000ac6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b3c:	0350      	lsls	r0, r2, #13
 8000b3e:	d528      	bpl.n	8000b92 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	0319      	lsls	r1, r3, #12
 8000b44:	d432      	bmi.n	8000bac <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000b48:	b10b      	cbz	r3, 8000b4e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0e9      	beq.n	8000b28 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b56:	07da      	lsls	r2, r3, #31
 8000b58:	d519      	bpl.n	8000b8e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b5a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000b5c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b6a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b6e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000b72:	9b01      	ldr	r3, [sp, #4]
 8000b74:	3301      	adds	r3, #1
 8000b76:	429f      	cmp	r7, r3
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	d302      	bcc.n	8000b82 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000b7c:	6813      	ldr	r3, [r2, #0]
 8000b7e:	07db      	lsls	r3, r3, #31
 8000b80:	d4f7      	bmi.n	8000b72 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000b82:	2300      	movs	r3, #0
 8000b84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000b8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b90:	e7c7      	b.n	8000b22 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000b98:	d108      	bne.n	8000bac <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	f021 0110 	bic.w	r1, r1, #16
 8000ba0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000ba2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000ba4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000ba8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000bac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bae:	e7cb      	b.n	8000b48 <HAL_DMA_IRQHandler+0x108>
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bb8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000d60 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bc0:	4a65      	ldr	r2, [pc, #404]	; (8000d58 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bc2:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000d64 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000bca:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bce:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000bd0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000bd8:	45b6      	cmp	lr, r6
 8000bda:	f040 80aa 	bne.w	8000d32 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bde:	684c      	ldr	r4, [r1, #4]
 8000be0:	f024 0710 	bic.w	r7, r4, #16
 8000be4:	2f02      	cmp	r7, #2
 8000be6:	d116      	bne.n	8000c16 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000be8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000bec:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bf0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000bf4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bf8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000bfc:	f04f 0c0f 	mov.w	ip, #15
 8000c00:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c04:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c08:	690d      	ldr	r5, [r1, #16]
 8000c0a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c0e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000c12:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c16:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c1a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c1c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c20:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c24:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c26:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c2a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c2e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c32:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c34:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c38:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000c3a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c3e:	d811      	bhi.n	8000c64 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c40:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c42:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c46:	68cf      	ldr	r7, [r1, #12]
 8000c48:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000c4c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000c50:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c52:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c54:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c58:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c62:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c64:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c66:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c68:	688f      	ldr	r7, [r1, #8]
 8000c6a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c6e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c70:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c72:	00e5      	lsls	r5, r4, #3
 8000c74:	d55d      	bpl.n	8000d32 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	f04f 0b00 	mov.w	fp, #0
 8000c7a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000c7e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c82:	4d36      	ldr	r5, [pc, #216]	; (8000d5c <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c84:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000c88:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000c8c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000c90:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000c94:	9703      	str	r7, [sp, #12]
 8000c96:	9f03      	ldr	r7, [sp, #12]
 8000c98:	f023 0703 	bic.w	r7, r3, #3
 8000c9c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ca0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000cb0:	f04f 0e0f 	mov.w	lr, #15
 8000cb4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cba:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cbe:	d03f      	beq.n	8000d40 <HAL_GPIO_Init+0x18c>
 8000cc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc4:	42a8      	cmp	r0, r5
 8000cc6:	d03d      	beq.n	8000d44 <HAL_GPIO_Init+0x190>
 8000cc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ccc:	42a8      	cmp	r0, r5
 8000cce:	d03b      	beq.n	8000d48 <HAL_GPIO_Init+0x194>
 8000cd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cd4:	42a8      	cmp	r0, r5
 8000cd6:	d039      	beq.n	8000d4c <HAL_GPIO_Init+0x198>
 8000cd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cdc:	42a8      	cmp	r0, r5
 8000cde:	d037      	beq.n	8000d50 <HAL_GPIO_Init+0x19c>
 8000ce0:	4548      	cmp	r0, r9
 8000ce2:	d037      	beq.n	8000d54 <HAL_GPIO_Init+0x1a0>
 8000ce4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000ce8:	42a8      	cmp	r0, r5
 8000cea:	bf14      	ite	ne
 8000cec:	2507      	movne	r5, #7
 8000cee:	2506      	moveq	r5, #6
 8000cf0:	fa05 f50c 	lsl.w	r5, r5, ip
 8000cf4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cf8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000cfa:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfe:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d02:	bf0c      	ite	eq
 8000d04:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d06:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000d08:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000d0a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d0c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d10:	bf0c      	ite	eq
 8000d12:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d14:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000d16:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d18:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d1a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d1e:	bf0c      	ite	eq
 8000d20:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d22:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000d24:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000d26:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d28:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d2a:	bf54      	ite	pl
 8000d2c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d2e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d30:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d32:	3301      	adds	r3, #1
 8000d34:	2b10      	cmp	r3, #16
 8000d36:	f47f af48 	bne.w	8000bca <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000d3a:	b005      	add	sp, #20
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d40:	465d      	mov	r5, fp
 8000d42:	e7d5      	b.n	8000cf0 <HAL_GPIO_Init+0x13c>
 8000d44:	2501      	movs	r5, #1
 8000d46:	e7d3      	b.n	8000cf0 <HAL_GPIO_Init+0x13c>
 8000d48:	2502      	movs	r5, #2
 8000d4a:	e7d1      	b.n	8000cf0 <HAL_GPIO_Init+0x13c>
 8000d4c:	2503      	movs	r5, #3
 8000d4e:	e7cf      	b.n	8000cf0 <HAL_GPIO_Init+0x13c>
 8000d50:	2504      	movs	r5, #4
 8000d52:	e7cd      	b.n	8000cf0 <HAL_GPIO_Init+0x13c>
 8000d54:	2505      	movs	r5, #5
 8000d56:	e7cb      	b.n	8000cf0 <HAL_GPIO_Init+0x13c>
 8000d58:	40013c00 	.word	0x40013c00
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40021400 	.word	0x40021400

08000d68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d68:	b10a      	cbz	r2, 8000d6e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d6a:	6181      	str	r1, [r0, #24]
 8000d6c:	4770      	bx	lr
 8000d6e:	0409      	lsls	r1, r1, #16
 8000d70:	e7fb      	b.n	8000d6a <HAL_GPIO_WritePin+0x2>
	...

08000d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d78:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	b910      	cbnz	r0, 8000d84 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000d7e:	2001      	movs	r0, #1
 8000d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d84:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <HAL_RCC_ClockConfig+0x124>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	f002 020f 	and.w	r2, r2, #15
 8000d8c:	428a      	cmp	r2, r1
 8000d8e:	d328      	bcc.n	8000de2 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d90:	6821      	ldr	r1, [r4, #0]
 8000d92:	078f      	lsls	r7, r1, #30
 8000d94:	d42d      	bmi.n	8000df2 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d96:	07c8      	lsls	r0, r1, #31
 8000d98:	d440      	bmi.n	8000e1c <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d9a:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <HAL_RCC_ClockConfig+0x124>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	f002 020f 	and.w	r2, r2, #15
 8000da2:	4295      	cmp	r5, r2
 8000da4:	d366      	bcc.n	8000e74 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da6:	6822      	ldr	r2, [r4, #0]
 8000da8:	0751      	lsls	r1, r2, #29
 8000daa:	d46c      	bmi.n	8000e86 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dac:	0713      	lsls	r3, r2, #28
 8000dae:	d507      	bpl.n	8000dc0 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000db0:	4a3a      	ldr	r2, [pc, #232]	; (8000e9c <HAL_RCC_ClockConfig+0x128>)
 8000db2:	6921      	ldr	r1, [r4, #16]
 8000db4:	6893      	ldr	r3, [r2, #8]
 8000db6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000dba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dbe:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dc0:	f000 f892 	bl	8000ee8 <HAL_RCC_GetSysClockFreq>
 8000dc4:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <HAL_RCC_ClockConfig+0x128>)
 8000dc6:	4a36      	ldr	r2, [pc, #216]	; (8000ea0 <HAL_RCC_ClockConfig+0x12c>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	40d8      	lsrs	r0, r3
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <HAL_RCC_ClockConfig+0x130>)
 8000dd4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff fb9c 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000ddc:	2000      	movs	r0, #0
 8000dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 030f 	and.w	r3, r3, #15
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d1c6      	bne.n	8000d7e <HAL_RCC_ClockConfig+0xa>
 8000df0:	e7ce      	b.n	8000d90 <HAL_RCC_ClockConfig+0x1c>
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000df4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000df8:	bf1e      	ittt	ne
 8000dfa:	689a      	ldrne	r2, [r3, #8]
 8000dfc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000e00:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e02:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e04:	bf42      	ittt	mi
 8000e06:	689a      	ldrmi	r2, [r3, #8]
 8000e08:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000e0c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	68a0      	ldr	r0, [r4, #8]
 8000e12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e16:	4302      	orrs	r2, r0
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	e7bc      	b.n	8000d96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e1c:	6862      	ldr	r2, [r4, #4]
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_RCC_ClockConfig+0x128>)
 8000e20:	2a01      	cmp	r2, #1
 8000e22:	d11d      	bne.n	8000e60 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2a:	d0a8      	beq.n	8000d7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e2c:	4e1b      	ldr	r6, [pc, #108]	; (8000e9c <HAL_RCC_ClockConfig+0x128>)
 8000e2e:	68b3      	ldr	r3, [r6, #8]
 8000e30:	f023 0303 	bic.w	r3, r3, #3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e38:	f7ff fbb6 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e42:	68b3      	ldr	r3, [r6, #8]
 8000e44:	6862      	ldr	r2, [r4, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e4e:	d0a4      	beq.n	8000d9a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e50:	f7ff fbaa 	bl	80005a8 <HAL_GetTick>
 8000e54:	1bc0      	subs	r0, r0, r7
 8000e56:	4540      	cmp	r0, r8
 8000e58:	d9f3      	bls.n	8000e42 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000e5a:	2003      	movs	r0, #3
}
 8000e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e60:	1e91      	subs	r1, r2, #2
 8000e62:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e64:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e66:	d802      	bhi.n	8000e6e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e6c:	e7dd      	b.n	8000e2a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6e:	f013 0f02 	tst.w	r3, #2
 8000e72:	e7da      	b.n	8000e2a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e74:	b2ea      	uxtb	r2, r5
 8000e76:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	429d      	cmp	r5, r3
 8000e80:	f47f af7d 	bne.w	8000d7e <HAL_RCC_ClockConfig+0xa>
 8000e84:	e78f      	b.n	8000da6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e86:	4905      	ldr	r1, [pc, #20]	; (8000e9c <HAL_RCC_ClockConfig+0x128>)
 8000e88:	68e0      	ldr	r0, [r4, #12]
 8000e8a:	688b      	ldr	r3, [r1, #8]
 8000e8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e90:	4303      	orrs	r3, r0
 8000e92:	608b      	str	r3, [r1, #8]
 8000e94:	e78a      	b.n	8000dac <HAL_RCC_ClockConfig+0x38>
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	08002048 	.word	0x08002048
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000eb6:	6810      	ldr	r0, [r2, #0]
}
 8000eb8:	40d8      	lsrs	r0, r3
 8000eba:	4770      	bx	lr
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	08002058 	.word	0x08002058
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ed2:	5cd3      	ldrb	r3, [r2, r3]
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ed6:	6810      	ldr	r0, [r2, #0]
}
 8000ed8:	40d8      	lsrs	r0, r3
 8000eda:	4770      	bx	lr
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	08002058 	.word	0x08002058
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ee8:	4920      	ldr	r1, [pc, #128]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000eea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eec:	688b      	ldr	r3, [r1, #8]
 8000eee:	f003 030c 	and.w	r3, r3, #12
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d007      	beq.n	8000f06 <HAL_RCC_GetSysClockFreq+0x1e>
 8000ef6:	2b0c      	cmp	r3, #12
 8000ef8:	d020      	beq.n	8000f3c <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x88>)
 8000efc:	481d      	ldr	r0, [pc, #116]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf18      	it	ne
 8000f02:	4610      	movne	r0, r2
 8000f04:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f08:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f10:	bf14      	ite	ne
 8000f12:	4818      	ldrne	r0, [pc, #96]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f14:	4816      	ldreq	r0, [pc, #88]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f1a:	bf18      	it	ne
 8000f1c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f22:	fba1 0100 	umull	r0, r1, r1, r0
 8000f26:	f7ff f96d 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x84>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f32:	3301      	adds	r3, #1
 8000f34:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000f36:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f3a:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f3c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f3e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f40:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f42:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f46:	bf14      	ite	ne
 8000f48:	480a      	ldrne	r0, [pc, #40]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f4a:	4809      	ldreq	r0, [pc, #36]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f4c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f50:	bf18      	it	ne
 8000f52:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f54:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f58:	fba1 0100 	umull	r0, r1, r1, r0
 8000f5c:	f7ff f952 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x84>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000f68:	e7e5      	b.n	8000f36 <HAL_RCC_GetSysClockFreq+0x4e>
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	00f42400 	.word	0x00f42400
 8000f74:	007a1200 	.word	0x007a1200

08000f78 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f78:	6803      	ldr	r3, [r0, #0]
{
 8000f7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	07df      	lsls	r7, r3, #31
{
 8000f80:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	d410      	bmi.n	8000fa6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	079e      	lsls	r6, r3, #30
 8000f88:	d467      	bmi.n	800105a <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	071a      	lsls	r2, r3, #28
 8000f8e:	f100 80b2 	bmi.w	80010f6 <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	075b      	lsls	r3, r3, #29
 8000f96:	f100 80d0 	bmi.w	800113a <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9a:	69a2      	ldr	r2, [r4, #24]
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	f040 8139 	bne.w	8001214 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	e01e      	b.n	8000fe4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000fa6:	4b97      	ldr	r3, [pc, #604]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	f002 020c 	and.w	r2, r2, #12
 8000fae:	2a04      	cmp	r2, #4
 8000fb0:	d010      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000fb8:	2a08      	cmp	r2, #8
 8000fba:	d102      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	025d      	lsls	r5, r3, #9
 8000fc0:	d408      	bmi.n	8000fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc2:	4b90      	ldr	r3, [pc, #576]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fca:	2a0c      	cmp	r2, #12
 8000fcc:	d10d      	bne.n	8000fea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	0250      	lsls	r0, r2, #9
 8000fd2:	d50a      	bpl.n	8000fea <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0399      	lsls	r1, r3, #14
 8000fda:	d5d3      	bpl.n	8000f84 <HAL_RCC_OscConfig+0xc>
 8000fdc:	6863      	ldr	r3, [r4, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1d0      	bne.n	8000f84 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000fe2:	2001      	movs	r0, #1
}
 8000fe4:	b002      	add	sp, #8
 8000fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fea:	6862      	ldr	r2, [r4, #4]
 8000fec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ff0:	d111      	bne.n	8001016 <HAL_RCC_OscConfig+0x9e>
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ff8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fad5 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4d81      	ldr	r5, [pc, #516]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001000:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	039a      	lsls	r2, r3, #14
 8001006:	d4bd      	bmi.n	8000f84 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff face 	bl	80005a8 <HAL_GetTick>
 800100c:	1b80      	subs	r0, r0, r6
 800100e:	2864      	cmp	r0, #100	; 0x64
 8001010:	d9f7      	bls.n	8001002 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
 8001014:	e7e6      	b.n	8000fe4 <HAL_RCC_OscConfig+0x6c>
 8001016:	4d7b      	ldr	r5, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001018:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	d107      	bne.n	8001030 <HAL_RCC_OscConfig+0xb8>
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	602b      	str	r3, [r5, #0]
 8001026:	682b      	ldr	r3, [r5, #0]
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	602b      	str	r3, [r5, #0]
 800102e:	e7e4      	b.n	8000ffa <HAL_RCC_OscConfig+0x82>
 8001030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001034:	602b      	str	r3, [r5, #0]
 8001036:	682b      	ldr	r3, [r5, #0]
 8001038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800103e:	2a00      	cmp	r2, #0
 8001040:	d1db      	bne.n	8000ffa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001042:	f7ff fab1 	bl	80005a8 <HAL_GetTick>
 8001046:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	039b      	lsls	r3, r3, #14
 800104c:	d59a      	bpl.n	8000f84 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104e:	f7ff faab 	bl	80005a8 <HAL_GetTick>
 8001052:	1b80      	subs	r0, r0, r6
 8001054:	2864      	cmp	r0, #100	; 0x64
 8001056:	d9f7      	bls.n	8001048 <HAL_RCC_OscConfig+0xd0>
 8001058:	e7db      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	f012 0f0c 	tst.w	r2, #12
 8001062:	d010      	beq.n	8001086 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800106a:	2a08      	cmp	r2, #8
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	025f      	lsls	r7, r3, #9
 8001072:	d508      	bpl.n	8001086 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001074:	4a63      	ldr	r2, [pc, #396]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 8001076:	6893      	ldr	r3, [r2, #8]
 8001078:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d111      	bne.n	80010a4 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001080:	6853      	ldr	r3, [r2, #4]
 8001082:	025e      	lsls	r6, r3, #9
 8001084:	d40e      	bmi.n	80010a4 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	4b5f      	ldr	r3, [pc, #380]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	0795      	lsls	r5, r2, #30
 800108c:	d502      	bpl.n	8001094 <HAL_RCC_OscConfig+0x11c>
 800108e:	68e2      	ldr	r2, [r4, #12]
 8001090:	2a01      	cmp	r2, #1
 8001092:	d1a6      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	6921      	ldr	r1, [r4, #16]
 8001098:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800109c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80010a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e772      	b.n	8000f8a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010a4:	68e2      	ldr	r2, [r4, #12]
 80010a6:	4b58      	ldr	r3, [pc, #352]	; (8001208 <HAL_RCC_OscConfig+0x290>)
 80010a8:	b1b2      	cbz	r2, 80010d8 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010ae:	f7ff fa7b 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b2:	4d54      	ldr	r5, [pc, #336]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80010b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	0798      	lsls	r0, r3, #30
 80010ba:	d507      	bpl.n	80010cc <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	6922      	ldr	r2, [r4, #16]
 80010c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010c8:	602b      	str	r3, [r5, #0]
 80010ca:	e75e      	b.n	8000f8a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010cc:	f7ff fa6c 	bl	80005a8 <HAL_GetTick>
 80010d0:	1b80      	subs	r0, r0, r6
 80010d2:	2802      	cmp	r0, #2
 80010d4:	d9ef      	bls.n	80010b6 <HAL_RCC_OscConfig+0x13e>
 80010d6:	e79c      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80010d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010da:	f7ff fa65 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	4d49      	ldr	r5, [pc, #292]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80010e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	0799      	lsls	r1, r3, #30
 80010e6:	f57f af50 	bpl.w	8000f8a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fa5d 	bl	80005a8 <HAL_GetTick>
 80010ee:	1b80      	subs	r0, r0, r6
 80010f0:	2802      	cmp	r0, #2
 80010f2:	d9f6      	bls.n	80010e2 <HAL_RCC_OscConfig+0x16a>
 80010f4:	e78d      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010f6:	6962      	ldr	r2, [r4, #20]
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <HAL_RCC_OscConfig+0x294>)
 80010fa:	b17a      	cbz	r2, 800111c <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001100:	f7ff fa52 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001104:	4d3f      	ldr	r5, [pc, #252]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001106:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001108:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800110a:	079f      	lsls	r7, r3, #30
 800110c:	f53f af41 	bmi.w	8000f92 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001110:	f7ff fa4a 	bl	80005a8 <HAL_GetTick>
 8001114:	1b80      	subs	r0, r0, r6
 8001116:	2802      	cmp	r0, #2
 8001118:	d9f6      	bls.n	8001108 <HAL_RCC_OscConfig+0x190>
 800111a:	e77a      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 800111c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800111e:	f7ff fa43 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001122:	4d38      	ldr	r5, [pc, #224]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001124:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001126:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001128:	0798      	lsls	r0, r3, #30
 800112a:	f57f af32 	bpl.w	8000f92 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fa3b 	bl	80005a8 <HAL_GetTick>
 8001132:	1b80      	subs	r0, r0, r6
 8001134:	2802      	cmp	r0, #2
 8001136:	d9f6      	bls.n	8001126 <HAL_RCC_OscConfig+0x1ae>
 8001138:	e76b      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 800113c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001142:	d128      	bne.n	8001196 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	9201      	str	r2, [sp, #4]
 8001146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001148:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001158:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115a:	4d2d      	ldr	r5, [pc, #180]	; (8001210 <HAL_RCC_OscConfig+0x298>)
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	05d9      	lsls	r1, r3, #23
 8001160:	d51b      	bpl.n	800119a <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001162:	68a3      	ldr	r3, [r4, #8]
 8001164:	4d27      	ldr	r5, [pc, #156]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 8001166:	2b01      	cmp	r3, #1
 8001168:	d127      	bne.n	80011ba <HAL_RCC_OscConfig+0x242>
 800116a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001172:	f7ff fa19 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001176:	4d23      	ldr	r5, [pc, #140]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001178:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800117e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001180:	079b      	lsls	r3, r3, #30
 8001182:	d539      	bpl.n	80011f8 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001184:	2e00      	cmp	r6, #0
 8001186:	f43f af08 	beq.w	8000f9a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <HAL_RCC_OscConfig+0x28c>)
 800118c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800118e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	e701      	b.n	8000f9a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2600      	movs	r6, #0
 8001198:	e7df      	b.n	800115a <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800119a:	682b      	ldr	r3, [r5, #0]
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80011a2:	f7ff fa01 	bl	80005a8 <HAL_GetTick>
 80011a6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	05da      	lsls	r2, r3, #23
 80011ac:	d4d9      	bmi.n	8001162 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ae:	f7ff f9fb 	bl	80005a8 <HAL_GetTick>
 80011b2:	1bc0      	subs	r0, r0, r7
 80011b4:	2802      	cmp	r0, #2
 80011b6:	d9f7      	bls.n	80011a8 <HAL_RCC_OscConfig+0x230>
 80011b8:	e72b      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d104      	bne.n	80011c8 <HAL_RCC_OscConfig+0x250>
 80011be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	672b      	str	r3, [r5, #112]	; 0x70
 80011c6:	e7d0      	b.n	800116a <HAL_RCC_OscConfig+0x1f2>
 80011c8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011ca:	f022 0201 	bic.w	r2, r2, #1
 80011ce:	672a      	str	r2, [r5, #112]	; 0x70
 80011d0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011d2:	f022 0204 	bic.w	r2, r2, #4
 80011d6:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ca      	bne.n	8001172 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 80011dc:	f7ff f9e4 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011e4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e8:	0798      	lsls	r0, r3, #30
 80011ea:	d5cb      	bpl.n	8001184 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f7ff f9dc 	bl	80005a8 <HAL_GetTick>
 80011f0:	1bc0      	subs	r0, r0, r7
 80011f2:	4540      	cmp	r0, r8
 80011f4:	d9f7      	bls.n	80011e6 <HAL_RCC_OscConfig+0x26e>
 80011f6:	e70c      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f8:	f7ff f9d6 	bl	80005a8 <HAL_GetTick>
 80011fc:	1bc0      	subs	r0, r0, r7
 80011fe:	4540      	cmp	r0, r8
 8001200:	d9bd      	bls.n	800117e <HAL_RCC_OscConfig+0x206>
 8001202:	e706      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
 8001204:	40023800 	.word	0x40023800
 8001208:	42470000 	.word	0x42470000
 800120c:	42470e80 	.word	0x42470e80
 8001210:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001214:	4d23      	ldr	r5, [pc, #140]	; (80012a4 <HAL_RCC_OscConfig+0x32c>)
 8001216:	68ab      	ldr	r3, [r5, #8]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	f43f aee0 	beq.w	8000fe2 <HAL_RCC_OscConfig+0x6a>
 8001222:	4e21      	ldr	r6, [pc, #132]	; (80012a8 <HAL_RCC_OscConfig+0x330>)
 8001224:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001226:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001228:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122a:	d12d      	bne.n	8001288 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 800122c:	f7ff f9bc 	bl	80005a8 <HAL_GetTick>
 8001230:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001232:	682b      	ldr	r3, [r5, #0]
 8001234:	0199      	lsls	r1, r3, #6
 8001236:	d421      	bmi.n	800127c <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001238:	6a22      	ldr	r2, [r4, #32]
 800123a:	69e3      	ldr	r3, [r4, #28]
 800123c:	4313      	orrs	r3, r2
 800123e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001240:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001244:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001246:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800124a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800124c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001250:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001252:	4c14      	ldr	r4, [pc, #80]	; (80012a4 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001254:	0852      	lsrs	r2, r2, #1
 8001256:	3a01      	subs	r2, #1
 8001258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800125c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800125e:	2301      	movs	r3, #1
 8001260:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001262:	f7ff f9a1 	bl	80005a8 <HAL_GetTick>
 8001266:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	019a      	lsls	r2, r3, #6
 800126c:	f53f ae99 	bmi.w	8000fa2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff f99a 	bl	80005a8 <HAL_GetTick>
 8001274:	1b40      	subs	r0, r0, r5
 8001276:	2802      	cmp	r0, #2
 8001278:	d9f6      	bls.n	8001268 <HAL_RCC_OscConfig+0x2f0>
 800127a:	e6ca      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff f994 	bl	80005a8 <HAL_GetTick>
 8001280:	1bc0      	subs	r0, r0, r7
 8001282:	2802      	cmp	r0, #2
 8001284:	d9d5      	bls.n	8001232 <HAL_RCC_OscConfig+0x2ba>
 8001286:	e6c4      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001288:	f7ff f98e 	bl	80005a8 <HAL_GetTick>
 800128c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	019b      	lsls	r3, r3, #6
 8001292:	f57f ae86 	bpl.w	8000fa2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff f987 	bl	80005a8 <HAL_GetTick>
 800129a:	1b00      	subs	r0, r0, r4
 800129c:	2802      	cmp	r0, #2
 800129e:	d9f6      	bls.n	800128e <HAL_RCC_OscConfig+0x316>
 80012a0:	e6b7      	b.n	8001012 <HAL_RCC_OscConfig+0x9a>
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	42470060 	.word	0x42470060

080012ac <HAL_TIM_OC_DelayElapsedCallback>:
 80012ac:	4770      	bx	lr

080012ae <HAL_TIM_IC_CaptureCallback>:
 80012ae:	4770      	bx	lr

080012b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80012b0:	4770      	bx	lr

080012b2 <HAL_TIM_TriggerCallback>:
 80012b2:	4770      	bx	lr

080012b4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012b4:	6803      	ldr	r3, [r0, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	0791      	lsls	r1, r2, #30
{
 80012ba:	b510      	push	{r4, lr}
 80012bc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012be:	d50e      	bpl.n	80012de <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	0792      	lsls	r2, r2, #30
 80012c4:	d50b      	bpl.n	80012de <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012c6:	f06f 0202 	mvn.w	r2, #2
 80012ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012cc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012ce:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012d0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012d2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012d4:	d077      	beq.n	80013c6 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80012d6:	f7ff ffea 	bl	80012ae <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012da:	2300      	movs	r3, #0
 80012dc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	0750      	lsls	r0, r2, #29
 80012e4:	d510      	bpl.n	8001308 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	0751      	lsls	r1, r2, #29
 80012ea:	d50d      	bpl.n	8001308 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012ec:	f06f 0204 	mvn.w	r2, #4
 80012f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012f2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012f4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012f6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012fa:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012fe:	d068      	beq.n	80013d2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001300:	f7ff ffd5 	bl	80012ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001304:	2300      	movs	r3, #0
 8001306:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	0712      	lsls	r2, r2, #28
 800130e:	d50f      	bpl.n	8001330 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	0710      	lsls	r0, r2, #28
 8001314:	d50c      	bpl.n	8001330 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001316:	f06f 0208 	mvn.w	r2, #8
 800131a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800131c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800131e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001320:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001322:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001324:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001326:	d05a      	beq.n	80013de <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001328:	f7ff ffc1 	bl	80012ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800132c:	2300      	movs	r3, #0
 800132e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	06d2      	lsls	r2, r2, #27
 8001336:	d510      	bpl.n	800135a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	06d0      	lsls	r0, r2, #27
 800133c:	d50d      	bpl.n	800135a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800133e:	f06f 0210 	mvn.w	r2, #16
 8001342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001344:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001346:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001348:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800134c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800134e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001350:	d04b      	beq.n	80013ea <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001352:	f7ff ffac 	bl	80012ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001356:	2300      	movs	r3, #0
 8001358:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	07d1      	lsls	r1, r2, #31
 8001360:	d508      	bpl.n	8001374 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	07d2      	lsls	r2, r2, #31
 8001366:	d505      	bpl.n	8001374 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001368:	f06f 0201 	mvn.w	r2, #1
 800136c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800136e:	4620      	mov	r0, r4
 8001370:	f000 fcbe 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	0610      	lsls	r0, r2, #24
 800137a:	d508      	bpl.n	800138e <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	0611      	lsls	r1, r2, #24
 8001380:	d505      	bpl.n	800138e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001382:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001388:	4620      	mov	r0, r4
 800138a:	f000 f972 	bl	8001672 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	0652      	lsls	r2, r2, #25
 8001394:	d508      	bpl.n	80013a8 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	0650      	lsls	r0, r2, #25
 800139a:	d505      	bpl.n	80013a8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800139c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80013a2:	4620      	mov	r0, r4
 80013a4:	f7ff ff85 	bl	80012b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	0691      	lsls	r1, r2, #26
 80013ae:	d522      	bpl.n	80013f6 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	0692      	lsls	r2, r2, #26
 80013b4:	d51f      	bpl.n	80013f6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013b6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80013ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013bc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80013be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80013c2:	f000 b955 	b.w	8001670 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013c6:	f7ff ff71 	bl	80012ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ca:	4620      	mov	r0, r4
 80013cc:	f7ff ff70 	bl	80012b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80013d0:	e783      	b.n	80012da <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013d2:	f7ff ff6b 	bl	80012ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff ff6a 	bl	80012b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80013dc:	e792      	b.n	8001304 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013de:	f7ff ff65 	bl	80012ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff ff64 	bl	80012b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80013e8:	e7a0      	b.n	800132c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ea:	f7ff ff5f 	bl	80012ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ee:	4620      	mov	r0, r4
 80013f0:	f7ff ff5e 	bl	80012b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80013f4:	e7af      	b.n	8001356 <HAL_TIM_IRQHandler+0xa2>
 80013f6:	bd10      	pop	{r4, pc}

080013f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013f8:	4a30      	ldr	r2, [pc, #192]	; (80014bc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80013fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013fc:	4290      	cmp	r0, r2
 80013fe:	d012      	beq.n	8001426 <TIM_Base_SetConfig+0x2e>
 8001400:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001404:	d00f      	beq.n	8001426 <TIM_Base_SetConfig+0x2e>
 8001406:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800140a:	4290      	cmp	r0, r2
 800140c:	d00b      	beq.n	8001426 <TIM_Base_SetConfig+0x2e>
 800140e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001412:	4290      	cmp	r0, r2
 8001414:	d007      	beq.n	8001426 <TIM_Base_SetConfig+0x2e>
 8001416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800141a:	4290      	cmp	r0, r2
 800141c:	d003      	beq.n	8001426 <TIM_Base_SetConfig+0x2e>
 800141e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001422:	4290      	cmp	r0, r2
 8001424:	d119      	bne.n	800145a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001426:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800142c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800142e:	4a23      	ldr	r2, [pc, #140]	; (80014bc <TIM_Base_SetConfig+0xc4>)
 8001430:	4290      	cmp	r0, r2
 8001432:	d029      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 8001434:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001438:	d026      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 800143a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800143e:	4290      	cmp	r0, r2
 8001440:	d022      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 8001442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001446:	4290      	cmp	r0, r2
 8001448:	d01e      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 800144a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144e:	4290      	cmp	r0, r2
 8001450:	d01a      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 8001452:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001456:	4290      	cmp	r0, r2
 8001458:	d016      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <TIM_Base_SetConfig+0xc8>)
 800145c:	4290      	cmp	r0, r2
 800145e:	d013      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 8001460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001464:	4290      	cmp	r0, r2
 8001466:	d00f      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 8001468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800146c:	4290      	cmp	r0, r2
 800146e:	d00b      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 8001470:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001474:	4290      	cmp	r0, r2
 8001476:	d007      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 8001478:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800147c:	4290      	cmp	r0, r2
 800147e:	d003      	beq.n	8001488 <TIM_Base_SetConfig+0x90>
 8001480:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001484:	4290      	cmp	r0, r2
 8001486:	d103      	bne.n	8001490 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001488:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800148a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800148e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001490:	694a      	ldr	r2, [r1, #20]
 8001492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001496:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001498:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800149a:	688b      	ldr	r3, [r1, #8]
 800149c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800149e:	680b      	ldr	r3, [r1, #0]
 80014a0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <TIM_Base_SetConfig+0xc4>)
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d003      	beq.n	80014b0 <TIM_Base_SetConfig+0xb8>
 80014a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014ac:	4298      	cmp	r0, r3
 80014ae:	d101      	bne.n	80014b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014b0:	690b      	ldr	r3, [r1, #16]
 80014b2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014b4:	2301      	movs	r3, #1
 80014b6:	6143      	str	r3, [r0, #20]
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40014000 	.word	0x40014000

080014c4 <HAL_TIM_Base_Init>:
{
 80014c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80014c6:	4604      	mov	r4, r0
 80014c8:	b1a0      	cbz	r0, 80014f4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80014ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014d2:	b91b      	cbnz	r3, 80014dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80014d8:	f000 fccc 	bl	8001e74 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80014dc:	2302      	movs	r3, #2
 80014de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014e2:	6820      	ldr	r0, [r4, #0]
 80014e4:	1d21      	adds	r1, r4, #4
 80014e6:	f7ff ff87 	bl	80013f8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014f0:	2000      	movs	r0, #0
 80014f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014f4:	2001      	movs	r0, #1
}
 80014f6:	bd10      	pop	{r4, pc}

080014f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80014f8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80014fa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80014fc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014fe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001502:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001506:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001508:	6083      	str	r3, [r0, #8]
 800150a:	bd10      	pop	{r4, pc}

0800150c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800150c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001510:	2b01      	cmp	r3, #1
{
 8001512:	b570      	push	{r4, r5, r6, lr}
 8001514:	4604      	mov	r4, r0
 8001516:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800151a:	d019      	beq.n	8001550 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 800151c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001520:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001522:	2301      	movs	r3, #1
 8001524:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001528:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800152a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800152e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001532:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001534:	680b      	ldr	r3, [r1, #0]
 8001536:	2b40      	cmp	r3, #64	; 0x40
 8001538:	d065      	beq.n	8001606 <HAL_TIM_ConfigClockSource+0xfa>
 800153a:	d815      	bhi.n	8001568 <HAL_TIM_ConfigClockSource+0x5c>
 800153c:	2b10      	cmp	r3, #16
 800153e:	d00c      	beq.n	800155a <HAL_TIM_ConfigClockSource+0x4e>
 8001540:	d807      	bhi.n	8001552 <HAL_TIM_ConfigClockSource+0x46>
 8001542:	b153      	cbz	r3, 800155a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001544:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001546:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001548:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800154c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001550:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001552:	2b20      	cmp	r3, #32
 8001554:	d001      	beq.n	800155a <HAL_TIM_ConfigClockSource+0x4e>
 8001556:	2b30      	cmp	r3, #48	; 0x30
 8001558:	d1f4      	bne.n	8001544 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800155a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800155c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001560:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001564:	4313      	orrs	r3, r2
 8001566:	e01a      	b.n	800159e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001568:	2b60      	cmp	r3, #96	; 0x60
 800156a:	d034      	beq.n	80015d6 <HAL_TIM_ConfigClockSource+0xca>
 800156c:	d819      	bhi.n	80015a2 <HAL_TIM_ConfigClockSource+0x96>
 800156e:	2b50      	cmp	r3, #80	; 0x50
 8001570:	d1e8      	bne.n	8001544 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001572:	684a      	ldr	r2, [r1, #4]
 8001574:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001576:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001578:	6a05      	ldr	r5, [r0, #32]
 800157a:	f025 0501 	bic.w	r5, r5, #1
 800157e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001580:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001582:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800158a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800158e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001590:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001592:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001594:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800159a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800159e:	6083      	str	r3, [r0, #8]
 80015a0:	e7d0      	b.n	8001544 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80015a2:	2b70      	cmp	r3, #112	; 0x70
 80015a4:	d00c      	beq.n	80015c0 <HAL_TIM_ConfigClockSource+0xb4>
 80015a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015aa:	d1cb      	bne.n	8001544 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80015ac:	68cb      	ldr	r3, [r1, #12]
 80015ae:	684a      	ldr	r2, [r1, #4]
 80015b0:	6889      	ldr	r1, [r1, #8]
 80015b2:	f7ff ffa1 	bl	80014f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015b6:	6822      	ldr	r2, [r4, #0]
 80015b8:	6893      	ldr	r3, [r2, #8]
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015be:	e008      	b.n	80015d2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80015c0:	68cb      	ldr	r3, [r1, #12]
 80015c2:	684a      	ldr	r2, [r1, #4]
 80015c4:	6889      	ldr	r1, [r1, #8]
 80015c6:	f7ff ff97 	bl	80014f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80015ca:	6822      	ldr	r2, [r4, #0]
 80015cc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80015ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015d2:	6093      	str	r3, [r2, #8]
      break;
 80015d4:	e7b6      	b.n	8001544 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015d6:	684d      	ldr	r5, [r1, #4]
 80015d8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015da:	6a01      	ldr	r1, [r0, #32]
 80015dc:	f021 0110 	bic.w	r1, r1, #16
 80015e0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015e2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80015e4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015e6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80015ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015f2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80015f6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80015f8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80015fa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80015fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001600:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001604:	e7cb      	b.n	800159e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001606:	684a      	ldr	r2, [r1, #4]
 8001608:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800160a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800160c:	6a05      	ldr	r5, [r0, #32]
 800160e:	f025 0501 	bic.w	r5, r5, #1
 8001612:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001614:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001616:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800161a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800161e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001622:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001624:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001626:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001628:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800162a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800162e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001632:	e7b4      	b.n	800159e <HAL_TIM_ConfigClockSource+0x92>

08001634 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001634:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001638:	2b01      	cmp	r3, #1
{
 800163a:	b530      	push	{r4, r5, lr}
 800163c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001640:	d014      	beq.n	800166c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001642:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001644:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001648:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800164a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800164c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800164e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001650:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001658:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800165a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800165c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800165e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001660:	2301      	movs	r3, #1
 8001662:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001666:	2300      	movs	r3, #0
 8001668:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800166c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800166e:	bd30      	pop	{r4, r5, pc}

08001670 <HAL_TIMEx_CommutCallback>:
 8001670:	4770      	bx	lr

08001672 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001672:	4770      	bx	lr

08001674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001678:	6806      	ldr	r6, [r0, #0]
 800167a:	68c2      	ldr	r2, [r0, #12]
 800167c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800167e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001680:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001684:	4313      	orrs	r3, r2
 8001686:	6133      	str	r3, [r6, #16]
{
 8001688:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800168a:	6883      	ldr	r3, [r0, #8]
 800168c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800168e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001690:	4303      	orrs	r3, r0
 8001692:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001694:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001698:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800169a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800169e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016a4:	6973      	ldr	r3, [r6, #20]
 80016a6:	69a2      	ldr	r2, [r4, #24]
 80016a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ac:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016ae:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016b2:	6173      	str	r3, [r6, #20]
 80016b4:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016b6:	d17c      	bne.n	80017b2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016b8:	429e      	cmp	r6, r3
 80016ba:	d003      	beq.n	80016c4 <UART_SetConfig+0x50>
 80016bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016c0:	429e      	cmp	r6, r3
 80016c2:	d144      	bne.n	800174e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016c4:	f7ff fc00 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
 80016c8:	2519      	movs	r5, #25
 80016ca:	fb05 f300 	mul.w	r3, r5, r0
 80016ce:	6860      	ldr	r0, [r4, #4]
 80016d0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016d4:	0040      	lsls	r0, r0, #1
 80016d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80016da:	fbb3 f3f9 	udiv	r3, r3, r9
 80016de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80016e2:	f7ff fbf1 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	4368      	muls	r0, r5
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fbb0 f7f3 	udiv	r7, r0, r3
 80016f0:	f7ff fbea 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	4368      	muls	r0, r5
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001702:	fb09 7313 	mls	r3, r9, r3, r7
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	3332      	adds	r3, #50	; 0x32
 800170a:	fbb3 f3f9 	udiv	r3, r3, r9
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001714:	f7ff fbd8 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
 8001718:	6862      	ldr	r2, [r4, #4]
 800171a:	4368      	muls	r0, r5
 800171c:	0052      	lsls	r2, r2, #1
 800171e:	fbb0 faf2 	udiv	sl, r0, r2
 8001722:	f7ff fbd1 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001726:	6863      	ldr	r3, [r4, #4]
 8001728:	4368      	muls	r0, r5
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001730:	fbb3 f3f9 	udiv	r3, r3, r9
 8001734:	fb09 a313 	mls	r3, r9, r3, sl
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	3332      	adds	r3, #50	; 0x32
 800173c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001746:	443b      	add	r3, r7
 8001748:	60b3      	str	r3, [r6, #8]
 800174a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800174e:	f7ff fbab 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 8001752:	2519      	movs	r5, #25
 8001754:	fb05 f300 	mul.w	r3, r5, r0
 8001758:	6860      	ldr	r0, [r4, #4]
 800175a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800175e:	0040      	lsls	r0, r0, #1
 8001760:	fbb3 f3f0 	udiv	r3, r3, r0
 8001764:	fbb3 f3f9 	udiv	r3, r3, r9
 8001768:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800176c:	f7ff fb9c 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 8001770:	6863      	ldr	r3, [r4, #4]
 8001772:	4368      	muls	r0, r5
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fbb0 f7f3 	udiv	r7, r0, r3
 800177a:	f7ff fb95 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 800177e:	6863      	ldr	r3, [r4, #4]
 8001780:	4368      	muls	r0, r5
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fbb0 f3f3 	udiv	r3, r0, r3
 8001788:	fbb3 f3f9 	udiv	r3, r3, r9
 800178c:	fb09 7313 	mls	r3, r9, r3, r7
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	3332      	adds	r3, #50	; 0x32
 8001794:	fbb3 f3f9 	udiv	r3, r3, r9
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800179e:	f7ff fb83 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 80017a2:	6862      	ldr	r2, [r4, #4]
 80017a4:	4368      	muls	r0, r5
 80017a6:	0052      	lsls	r2, r2, #1
 80017a8:	fbb0 faf2 	udiv	sl, r0, r2
 80017ac:	f7ff fb7c 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 80017b0:	e7b9      	b.n	8001726 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017b2:	429e      	cmp	r6, r3
 80017b4:	d002      	beq.n	80017bc <UART_SetConfig+0x148>
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <UART_SetConfig+0x230>)
 80017b8:	429e      	cmp	r6, r3
 80017ba:	d140      	bne.n	800183e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017bc:	f7ff fb84 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
 80017c0:	6867      	ldr	r7, [r4, #4]
 80017c2:	2519      	movs	r5, #25
 80017c4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80017c8:	fb05 f300 	mul.w	r3, r5, r0
 80017cc:	00bf      	lsls	r7, r7, #2
 80017ce:	fbb3 f3f7 	udiv	r3, r3, r7
 80017d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80017d6:	011f      	lsls	r7, r3, #4
 80017d8:	f7ff fb76 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
 80017dc:	6863      	ldr	r3, [r4, #4]
 80017de:	4368      	muls	r0, r5
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	fbb0 f8f3 	udiv	r8, r0, r3
 80017e6:	f7ff fb6f 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
 80017ea:	6863      	ldr	r3, [r4, #4]
 80017ec:	4368      	muls	r0, r5
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80017f8:	fb09 8313 	mls	r3, r9, r3, r8
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	3332      	adds	r3, #50	; 0x32
 8001800:	fbb3 f3f9 	udiv	r3, r3, r9
 8001804:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001808:	f7ff fb5e 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
 800180c:	6862      	ldr	r2, [r4, #4]
 800180e:	4368      	muls	r0, r5
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	fbb0 faf2 	udiv	sl, r0, r2
 8001816:	f7ff fb57 	bl	8000ec8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800181a:	6863      	ldr	r3, [r4, #4]
 800181c:	4368      	muls	r0, r5
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	fbb0 f3f3 	udiv	r3, r0, r3
 8001824:	fbb3 f3f9 	udiv	r3, r3, r9
 8001828:	fb09 a313 	mls	r3, r9, r3, sl
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	3332      	adds	r3, #50	; 0x32
 8001830:	fbb3 f3f9 	udiv	r3, r3, r9
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	ea43 0308 	orr.w	r3, r3, r8
 800183c:	e783      	b.n	8001746 <UART_SetConfig+0xd2>
 800183e:	f7ff fb33 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 8001842:	6867      	ldr	r7, [r4, #4]
 8001844:	2519      	movs	r5, #25
 8001846:	f04f 0964 	mov.w	r9, #100	; 0x64
 800184a:	fb05 f300 	mul.w	r3, r5, r0
 800184e:	00bf      	lsls	r7, r7, #2
 8001850:	fbb3 f3f7 	udiv	r3, r3, r7
 8001854:	fbb3 f3f9 	udiv	r3, r3, r9
 8001858:	011f      	lsls	r7, r3, #4
 800185a:	f7ff fb25 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 800185e:	6863      	ldr	r3, [r4, #4]
 8001860:	4368      	muls	r0, r5
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	fbb0 f8f3 	udiv	r8, r0, r3
 8001868:	f7ff fb1e 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 800186c:	6863      	ldr	r3, [r4, #4]
 800186e:	4368      	muls	r0, r5
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	fbb3 f3f9 	udiv	r3, r3, r9
 800187a:	fb09 8313 	mls	r3, r9, r3, r8
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	3332      	adds	r3, #50	; 0x32
 8001882:	fbb3 f3f9 	udiv	r3, r3, r9
 8001886:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800188a:	f7ff fb0d 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 800188e:	6862      	ldr	r2, [r4, #4]
 8001890:	4368      	muls	r0, r5
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	fbb0 faf2 	udiv	sl, r0, r2
 8001898:	f7ff fb06 	bl	8000ea8 <HAL_RCC_GetPCLK1Freq>
 800189c:	e7bd      	b.n	800181a <UART_SetConfig+0x1a6>
 800189e:	bf00      	nop
 80018a0:	40011000 	.word	0x40011000
 80018a4:	40011400 	.word	0x40011400

080018a8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	4604      	mov	r4, r0
 80018ac:	460e      	mov	r6, r1
 80018ae:	4617      	mov	r7, r2
 80018b0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018b2:	6821      	ldr	r1, [r4, #0]
 80018b4:	680b      	ldr	r3, [r1, #0]
 80018b6:	ea36 0303 	bics.w	r3, r6, r3
 80018ba:	d101      	bne.n	80018c0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80018bc:	2000      	movs	r0, #0
}
 80018be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80018c0:	1c6b      	adds	r3, r5, #1
 80018c2:	d0f7      	beq.n	80018b4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018c4:	b995      	cbnz	r5, 80018ec <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80018d8:	2320      	movs	r3, #32
 80018da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80018e2:	2300      	movs	r3, #0
 80018e4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80018e8:	2003      	movs	r0, #3
 80018ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018ec:	f7fe fe5c 	bl	80005a8 <HAL_GetTick>
 80018f0:	1bc0      	subs	r0, r0, r7
 80018f2:	4285      	cmp	r5, r0
 80018f4:	d2dd      	bcs.n	80018b2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80018f6:	e7e6      	b.n	80018c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080018f8 <HAL_UART_Init>:
{
 80018f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80018fa:	4604      	mov	r4, r0
 80018fc:	b340      	cbz	r0, 8001950 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80018fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001902:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001906:	b91b      	cbnz	r3, 8001910 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001908:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800190c:	f000 fafe 	bl	8001f0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001910:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001912:	2324      	movs	r3, #36	; 0x24
 8001914:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001918:	68d3      	ldr	r3, [r2, #12]
 800191a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800191e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff fea7 	bl	8001674 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800192e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001936:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800193e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001940:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001942:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001944:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001946:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800194a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800194e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001950:	2001      	movs	r0, #1
}
 8001952:	bd10      	pop	{r4, pc}

08001954 <HAL_UART_Transmit>:
{
 8001954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001958:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800195a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800195e:	2b20      	cmp	r3, #32
{
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001966:	d14f      	bne.n	8001a08 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001968:	2900      	cmp	r1, #0
 800196a:	d04a      	beq.n	8001a02 <HAL_UART_Transmit+0xae>
 800196c:	2a00      	cmp	r2, #0
 800196e:	d048      	beq.n	8001a02 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001970:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001974:	2b01      	cmp	r3, #1
 8001976:	d047      	beq.n	8001a08 <HAL_UART_Transmit+0xb4>
 8001978:	2301      	movs	r3, #1
 800197a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197e:	2300      	movs	r3, #0
 8001980:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001982:	2321      	movs	r3, #33	; 0x21
 8001984:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001988:	f7fe fe0e 	bl	80005a8 <HAL_GetTick>
    huart->TxXferSize = Size;
 800198c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001990:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001992:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001996:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001998:	b29b      	uxth	r3, r3
 800199a:	b96b      	cbnz	r3, 80019b8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	4632      	mov	r2, r6
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ff80 	bl	80018a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019a8:	b9b0      	cbnz	r0, 80019d8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80019aa:	2320      	movs	r3, #32
 80019ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80019b0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80019b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80019b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019c0:	68a3      	ldr	r3, [r4, #8]
 80019c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019c6:	4632      	mov	r2, r6
 80019c8:	463b      	mov	r3, r7
 80019ca:	f04f 0180 	mov.w	r1, #128	; 0x80
 80019ce:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019d0:	d10e      	bne.n	80019f0 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019d2:	f7ff ff69 	bl	80018a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019d6:	b110      	cbz	r0, 80019de <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80019d8:	2003      	movs	r0, #3
 80019da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019de:	882b      	ldrh	r3, [r5, #0]
 80019e0:	6822      	ldr	r2, [r4, #0]
 80019e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019e8:	6923      	ldr	r3, [r4, #16]
 80019ea:	b943      	cbnz	r3, 80019fe <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80019ec:	3502      	adds	r5, #2
 80019ee:	e7d2      	b.n	8001996 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019f0:	f7ff ff5a 	bl	80018a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	d1ef      	bne.n	80019d8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	782a      	ldrb	r2, [r5, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	3501      	adds	r5, #1
 8001a00:	e7c9      	b.n	8001996 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001a02:	2001      	movs	r0, #1
 8001a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001a08:	2002      	movs	r0, #2
}
 8001a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001a10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a10:	b530      	push	{r4, r5, lr}
 8001a12:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a14:	2210      	movs	r2, #16
 8001a16:	2100      	movs	r1, #0
 8001a18:	4668      	mov	r0, sp
 8001a1a:	f000 fafd 	bl	8002018 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001a1e:	4815      	ldr	r0, [pc, #84]	; (8001a74 <MX_ADC1_Init+0x64>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001a20:	4915      	ldr	r1, [pc, #84]	; (8001a78 <MX_ADC1_Init+0x68>)
 8001a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  hadc1.Init.ScanConvMode = ENABLE;
 8001a32:	2501      	movs	r5, #1
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a34:	2400      	movs	r4, #0
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a36:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001a38:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
  hadc1.Init.ScanConvMode = ENABLE;
 8001a3c:	6105      	str	r5, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a3e:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a40:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001a44:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a46:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a48:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a4a:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a4e:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a50:	f7fe fdb0 	bl	80005b4 <HAL_ADC_Init>
 8001a54:	b108      	cbz	r0, 8001a5a <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8001a56:	f000 f95f 	bl	8001d18 <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5a:	4669      	mov	r1, sp
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_ADC1_Init+0x64>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a5e:	9402      	str	r4, [sp, #8]
  sConfig.Rank = 1;
 8001a60:	e88d 0030 	stmia.w	sp, {r4, r5}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a64:	f7fe fe4c 	bl	8000700 <HAL_ADC_ConfigChannel>
 8001a68:	b108      	cbz	r0, 8001a6e <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8001a6a:	f000 f955 	bl	8001d18 <Error_Handler>
  }

}
 8001a6e:	b005      	add	sp, #20
 8001a70:	bd30      	pop	{r4, r5, pc}
 8001a72:	bf00      	nop
 8001a74:	20000038 	.word	0x20000038
 8001a78:	40012000 	.word	0x40012000

08001a7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	4606      	mov	r6, r0
 8001a80:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	2214      	movs	r2, #20
 8001a84:	2100      	movs	r1, #0
 8001a86:	a803      	add	r0, sp, #12
 8001a88:	f000 fac6 	bl	8002018 <memset>
  if(adcHandle->Instance==ADC1)
 8001a8c:	6832      	ldr	r2, [r6, #0]
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_ADC_MspInit+0x90>)
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d138      	bne.n	8001b06 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a94:	2500      	movs	r5, #0
 8001a96:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001a9a:	9501      	str	r5, [sp, #4]
 8001a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	481c      	ldr	r0, [pc, #112]	; (8001b10 <HAL_ADC_MspInit+0x94>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aa0:	4c1c      	ldr	r4, [pc, #112]	; (8001b14 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44
 8001aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aaa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001aae:	9201      	str	r2, [sp, #4]
 8001ab0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	9502      	str	r5, [sp, #8]
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f7ff f870 	bl	8000bb4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad6:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ad8:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae0:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ae6:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ae8:	4620      	mov	r0, r4
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aee:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af0:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001af2:	61e5      	str	r5, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001af4:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af6:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af8:	f7fe ff24 	bl	8000944 <HAL_DMA_Init>
 8001afc:	b108      	cbz	r0, 8001b02 <HAL_ADC_MspInit+0x86>
    {
      Error_Handler();
 8001afe:	f000 f90b 	bl	8001d18 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001b02:	63b4      	str	r4, [r6, #56]	; 0x38
 8001b04:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b06:	b008      	add	sp, #32
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40012000 	.word	0x40012000
 8001b10:	40020000 	.word	0x40020000
 8001b14:	20000080 	.word	0x20000080
 8001b18:	40026410 	.word	0x40026410

08001b1c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001b1c:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_DMA_Init+0x30>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	9201      	str	r2, [sp, #4]
 8001b24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b26:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001b2a:	6319      	str	r1, [r3, #48]	; 0x30
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b34:	4611      	mov	r1, r2
 8001b36:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b38:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b3a:	f7fe fe95 	bl	8000868 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b3e:	2038      	movs	r0, #56	; 0x38
 8001b40:	f7fe fec6 	bl	80008d0 <HAL_NVIC_EnableIRQ>

}
 8001b44:	b003      	add	sp, #12
 8001b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800

08001b50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b50:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b52:	2214      	movs	r2, #20
{
 8001b54:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	eb0d 0002 	add.w	r0, sp, r2
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f000 fa5c 	bl	8002018 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b60:	2400      	movs	r4, #0
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <MX_GPIO_Init+0x9c>)
 8001b64:	9401      	str	r4, [sp, #4]
 8001b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b68:	4d21      	ldr	r5, [pc, #132]	; (8001bf0 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	f042 0204 	orr.w	r2, r2, #4
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b72:	f002 0204 	and.w	r2, r2, #4
 8001b76:	9201      	str	r2, [sp, #4]
 8001b78:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b7a:	9402      	str	r4, [sp, #8]
 8001b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
 8001b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b86:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	9403      	str	r4, [sp, #12]
 8001b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
 8001b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9a:	f002 0201 	and.w	r2, r2, #1
 8001b9e:	9203      	str	r2, [sp, #12]
 8001ba0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	9404      	str	r4, [sp, #16]
 8001ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba6:	f042 0202 	orr.w	r2, r2, #2
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bb2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bbc:	f7ff f8d4 	bl	8000d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <MX_GPIO_Init+0xa4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bca:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bcc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f7fe fff0 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f7fe ffe6 	bl	8000bb4 <HAL_GPIO_Init>

}
 8001be8:	b00b      	add	sp, #44	; 0x2c
 8001bea:	bd30      	pop	{r4, r5, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	10210000 	.word	0x10210000
 8001bf8:	40020800 	.word	0x40020800

08001bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfc:	b530      	push	{r4, r5, lr}
 8001bfe:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c00:	2234      	movs	r2, #52	; 0x34
 8001c02:	2100      	movs	r1, #0
 8001c04:	a807      	add	r0, sp, #28
 8001c06:	f000 fa07 	bl	8002018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2214      	movs	r2, #20
 8001c0e:	a802      	add	r0, sp, #8
 8001c10:	f000 fa02 	bl	8002018 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	2500      	movs	r5, #0
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <SystemClock_Config+0x8c>)
 8001c18:	9500      	str	r5, [sp, #0]
 8001c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c2e:	9501      	str	r5, [sp, #4]
 8001c30:	6813      	ldr	r3, [r2, #0]
 8001c32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3e:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c50:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c52:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c56:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c58:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c60:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c62:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c64:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c66:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c68:	f7ff f986 	bl	8000f78 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c70:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c76:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c78:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c7c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7e:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c80:	f7ff f878 	bl	8000d74 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001c84:	b015      	add	sp, #84	; 0x54
 8001c86:	bd30      	pop	{r4, r5, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40007000 	.word	0x40007000

08001c90 <main>:
{
 8001c90:	b508      	push	{r3, lr}
  HAL_Init();
 8001c92:	f7fe fc63 	bl	800055c <HAL_Init>
	  if (timer==15)
 8001c96:	4d12      	ldr	r5, [pc, #72]	; (8001ce0 <main+0x50>)
 8001c98:	4c12      	ldr	r4, [pc, #72]	; (8001ce4 <main+0x54>)
  SystemClock_Config();
 8001c9a:	f7ff ffaf 	bl	8001bfc <SystemClock_Config>
  MX_GPIO_Init();
 8001c9e:	f7ff ff57 	bl	8001b50 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ca2:	f7ff ff3b 	bl	8001b1c <MX_DMA_Init>
  MX_ADC1_Init();
 8001ca6:	f7ff feb3 	bl	8001a10 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001caa:	f000 f893 	bl	8001dd4 <MX_TIM2_Init>
  MX_TIM10_Init();
 8001cae:	f000 f8c7 	bl	8001e40 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8001cb2:	f000 f90f 	bl	8001ed4 <MX_USART2_UART_Init>
 8001cb6:	462e      	mov	r6, r5
 8001cb8:	6823      	ldr	r3, [r4, #0]
	  if (timer==15)
 8001cba:	6829      	ldr	r1, [r5, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	290f      	cmp	r1, #15
	  a++;
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f103 0301 	add.w	r3, r3, #1
	  if (timer==15)
 8001cc6:	d1fa      	bne.n	8001cbe <main+0x2e>
		  HAL_UART_Transmit(&huart2, amount_of_water, 1, 10);
 8001cc8:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <main+0x58>)
 8001cca:	6022      	str	r2, [r4, #0]
 8001ccc:	230a      	movs	r3, #10
 8001cce:	2201      	movs	r2, #1
 8001cd0:	6809      	ldr	r1, [r1, #0]
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <main+0x5c>)
 8001cd4:	f7ff fe3e 	bl	8001954 <HAL_UART_Transmit>
		  timer=0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6033      	str	r3, [r6, #0]
 8001cdc:	e7ec      	b.n	8001cb8 <main+0x28>
 8001cde:	bf00      	nop
 8001ce0:	20000030 	.word	0x20000030
 8001ce4:	20000028 	.word	0x20000028
 8001ce8:	2000002c 	.word	0x2000002c
 8001cec:	20000160 	.word	0x20000160

08001cf0 <HAL_TIM_PeriodElapsedCallback>:
 * __HAL_TIM_CLEAR_FLAG(&htim10, TIM_FLAG_UPDATE);
 * @endcode
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance==TIM10)
 8001cf0:	6802      	ldr	r2, [r0, #0]
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d108      	bne.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		timer++;
 8001cf8:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cfa:	6813      	ldr	r3, [r2, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]
		__HAL_TIM_CLEAR_FLAG(&htim10, TIM_FLAG_UPDATE);
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0201 	mvn.w	r2, #1
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	4770      	bx	lr
 8001d0c:	40014400 	.word	0x40014400
 8001d10:	20000030 	.word	0x20000030
 8001d14:	200000e0 	.word	0x200000e0

08001d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_MspInit+0x3c>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	9100      	str	r1, [sp, #0]
 8001d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d2e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d32:	9200      	str	r2, [sp, #0]
 8001d34:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	9101      	str	r1, [sp, #4]
 8001d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d48:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d4c:	f7fe fd7a 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d50:	b003      	add	sp, #12
 8001d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800

08001d5c <NMI_Handler>:
 8001d5c:	4770      	bx	lr

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	e7fe      	b.n	8001d5e <HardFault_Handler>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	e7fe      	b.n	8001d60 <MemManage_Handler>

08001d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	e7fe      	b.n	8001d64 <UsageFault_Handler>

08001d66 <SVC_Handler>:
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:
 8001d68:	4770      	bx	lr

08001d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f7fe bc10 	b.w	8000590 <HAL_IncTick>

08001d70 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d70:	4801      	ldr	r0, [pc, #4]	; (8001d78 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8001d72:	f7ff ba9f 	b.w	80012b4 <HAL_TIM_IRQHandler>
 8001d76:	bf00      	nop
 8001d78:	200000e0 	.word	0x200000e0

08001d7c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d7c:	4801      	ldr	r0, [pc, #4]	; (8001d84 <DMA2_Stream0_IRQHandler+0x8>)
 8001d7e:	f7fe be5f 	b.w	8000a40 <HAL_DMA_IRQHandler>
 8001d82:	bf00      	nop
 8001d84:	20000080 	.word	0x20000080

08001d88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	490f      	ldr	r1, [pc, #60]	; (8001dc8 <SystemInit+0x40>)
 8001d8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <SystemInit+0x44>)
 8001d98:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d9a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001da2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001daa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <SystemInit+0x48>)
 8001db2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001dbc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001dc2:	608b      	str	r3, [r1, #8]
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	24003010 	.word	0x24003010

08001dd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	2100      	movs	r1, #0
 8001dda:	a802      	add	r0, sp, #8
 8001ddc:	f000 f91c 	bl	8002018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8001de0:	4816      	ldr	r0, [pc, #88]	; (8001e3c <MX_TIM2_Init+0x68>)
  htim2.Init.Prescaler = 2999;
 8001de2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001de6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dea:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 2999;
 8001dec:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 399;
 8001df0:	f240 128f 	movw	r2, #399	; 0x18f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 399;
 8001dfa:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e00:	f7ff fb60 	bl	80014c4 <HAL_TIM_Base_Init>
 8001e04:	b108      	cbz	r0, 8001e0a <MX_TIM2_Init+0x36>
  {
    Error_Handler();
 8001e06:	f7ff ff87 	bl	8001d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e0e:	a902      	add	r1, sp, #8
 8001e10:	480a      	ldr	r0, [pc, #40]	; (8001e3c <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e12:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e14:	f7ff fb7a 	bl	800150c <HAL_TIM_ConfigClockSource>
 8001e18:	b108      	cbz	r0, 8001e1e <MX_TIM2_Init+0x4a>
  {
    Error_Handler();
 8001e1a:	f7ff ff7d 	bl	8001d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2220      	movs	r2, #32
 8001e20:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e22:	4669      	mov	r1, sp
 8001e24:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2a:	f7ff fc03 	bl	8001634 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	b108      	cbz	r0, 8001e34 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001e30:	f7ff ff72 	bl	8001d18 <Error_Handler>
  }

}
 8001e34:	b007      	add	sp, #28
 8001e36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e3a:	bf00      	nop
 8001e3c:	20000120 	.word	0x20000120

08001e40 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8001e40:	480a      	ldr	r0, [pc, #40]	; (8001e6c <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = 20999;
 8001e42:	490b      	ldr	r1, [pc, #44]	; (8001e70 <MX_TIM10_Init+0x30>)
{
 8001e44:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 20999;
 8001e46:	f245 2307 	movw	r3, #20999	; 0x5207
 8001e4a:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 3999;
 8001e4e:	f640 729f 	movw	r2, #3999	; 0xf9f
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	2300      	movs	r3, #0
 8001e54:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 3999;
 8001e56:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e58:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e5c:	f7ff fb32 	bl	80014c4 <HAL_TIM_Base_Init>
 8001e60:	b118      	cbz	r0, 8001e6a <MX_TIM10_Init+0x2a>
  {
    Error_Handler();
  }

}
 8001e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e66:	f7ff bf57 	b.w	8001d18 <Error_Handler>
 8001e6a:	bd08      	pop	{r3, pc}
 8001e6c:	200000e0 	.word	0x200000e0
 8001e70:	40014400 	.word	0x40014400

08001e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001e74:	6803      	ldr	r3, [r0, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001e7a:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_TIM_Base_MspInit+0x58>)
 8001e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001e96:	b003      	add	sp, #12
 8001e98:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM10)
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_TIM_Base_MspInit+0x5c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d1f9      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_TIM_Base_MspInit+0x58>)
 8001ea6:	9201      	str	r2, [sp, #4]
 8001ea8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001eaa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001eae:	6459      	str	r1, [r3, #68]	; 0x44
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001eb8:	4611      	mov	r1, r2
 8001eba:	2019      	movs	r0, #25
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ebc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ebe:	f7fe fcd3 	bl	8000868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ec2:	2019      	movs	r0, #25
 8001ec4:	f7fe fd04 	bl	80008d0 <HAL_NVIC_EnableIRQ>
}
 8001ec8:	e7e5      	b.n	8001e96 <HAL_TIM_Base_MspInit+0x22>
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40014400 	.word	0x40014400

08001ed4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001ed6:	480b      	ldr	r0, [pc, #44]	; (8001f04 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_USART2_UART_Init+0x34>)
 8001eda:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001ede:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee2:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eea:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eec:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ef2:	f7ff fd01 	bl	80018f8 <HAL_UART_Init>
 8001ef6:	b118      	cbz	r0, 8001f00 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001efc:	f7ff bf0c 	b.w	8001d18 <Error_Handler>
 8001f00:	bd08      	pop	{r3, pc}
 8001f02:	bf00      	nop
 8001f04:	20000160 	.word	0x20000160
 8001f08:	40004400 	.word	0x40004400

08001f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4604      	mov	r4, r0
 8001f10:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	2214      	movs	r2, #20
 8001f14:	2100      	movs	r1, #0
 8001f16:	a803      	add	r0, sp, #12
 8001f18:	f000 f87e 	bl	8002018 <memset>
  if(uartHandle->Instance==USART2)
 8001f1c:	6822      	ldr	r2, [r4, #0]
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_UART_MspInit+0x68>)
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d124      	bne.n	8001f6e <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f24:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001f28:	2100      	movs	r1, #0
 8001f2a:	9101      	str	r1, [sp, #4]
 8001f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	4812      	ldr	r0, [pc, #72]	; (8001f78 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f30:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
 8001f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f38:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f3c:	9201      	str	r2, [sp, #4]
 8001f3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	9102      	str	r1, [sp, #8]
 8001f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f54:	230c      	movs	r3, #12
 8001f56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f66:	2307      	movs	r3, #7
 8001f68:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f7fe fe23 	bl	8000bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f6e:	b008      	add	sp, #32
 8001f70:	bd10      	pop	{r4, pc}
 8001f72:	bf00      	nop
 8001f74:	40004400 	.word	0x40004400
 8001f78:	40020000 	.word	0x40020000

08001f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
  ldr  r2, =_sbss
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fa6:	f7ff feef 	bl	8001d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f000 f811 	bl	8001fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fae:	f7ff fe6f 	bl	8001c90 <main>
  bx  lr    
 8001fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fb8:	08002070 	.word	0x08002070
  ldr  r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fc0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001fc4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001fc8:	200001a0 	.word	0x200001a0

08001fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC_IRQHandler>
	...

08001fd0 <__libc_init_array>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	4e0d      	ldr	r6, [pc, #52]	; (8002008 <__libc_init_array+0x38>)
 8001fd4:	4c0d      	ldr	r4, [pc, #52]	; (800200c <__libc_init_array+0x3c>)
 8001fd6:	1ba4      	subs	r4, r4, r6
 8001fd8:	10a4      	asrs	r4, r4, #2
 8001fda:	2500      	movs	r5, #0
 8001fdc:	42a5      	cmp	r5, r4
 8001fde:	d109      	bne.n	8001ff4 <__libc_init_array+0x24>
 8001fe0:	4e0b      	ldr	r6, [pc, #44]	; (8002010 <__libc_init_array+0x40>)
 8001fe2:	4c0c      	ldr	r4, [pc, #48]	; (8002014 <__libc_init_array+0x44>)
 8001fe4:	f000 f820 	bl	8002028 <_init>
 8001fe8:	1ba4      	subs	r4, r4, r6
 8001fea:	10a4      	asrs	r4, r4, #2
 8001fec:	2500      	movs	r5, #0
 8001fee:	42a5      	cmp	r5, r4
 8001ff0:	d105      	bne.n	8001ffe <__libc_init_array+0x2e>
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ff8:	4798      	blx	r3
 8001ffa:	3501      	adds	r5, #1
 8001ffc:	e7ee      	b.n	8001fdc <__libc_init_array+0xc>
 8001ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002002:	4798      	blx	r3
 8002004:	3501      	adds	r5, #1
 8002006:	e7f2      	b.n	8001fee <__libc_init_array+0x1e>
 8002008:	08002068 	.word	0x08002068
 800200c:	08002068 	.word	0x08002068
 8002010:	08002068 	.word	0x08002068
 8002014:	0800206c 	.word	0x0800206c

08002018 <memset>:
 8002018:	4402      	add	r2, r0
 800201a:	4603      	mov	r3, r0
 800201c:	4293      	cmp	r3, r2
 800201e:	d100      	bne.n	8002022 <memset+0xa>
 8002020:	4770      	bx	lr
 8002022:	f803 1b01 	strb.w	r1, [r3], #1
 8002026:	e7f9      	b.n	800201c <memset+0x4>

08002028 <_init>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	bf00      	nop
 800202c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202e:	bc08      	pop	{r3}
 8002030:	469e      	mov	lr, r3
 8002032:	4770      	bx	lr

08002034 <_fini>:
 8002034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002036:	bf00      	nop
 8002038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203a:	bc08      	pop	{r3}
 800203c:	469e      	mov	lr, r3
 800203e:	4770      	bx	lr
